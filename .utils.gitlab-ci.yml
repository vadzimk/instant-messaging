.before-script-secrets-anchor: &export-env-vars-script
  # Access the value of the file variable indirectly
  - eval "FILE_CONTENT=\$$ENV_FILE_VARIABLE"
  - cat "$FILE_CONTENT" > .env
  - set -o allexport &&
    source .env &&
    set +o allexport


.before-script-checkout-anchor: &checkout-only-script
  # Limits which directory to check out in the working tree
  - git sparse-checkout init --cone
  - echo "git sparse-checkout set ${CHECKOUT_DIR}"
  - git sparse-checkout set "$CHECKOUT_DIR" # dir to include in the working tree only

.before-script-install-packages-anchor: &install-packages-script
  - |
    if [ -z ${PACKAGES} ]; then
      echo "ERROR: The PACKAGES variable is not set. Define it in the pipeline or job variables."
      exit 1
    fi

    if [ -f /etc/os-release ]; then
      . /etc/os-release
      case "$ID" in
        alpine)
          echo "Distribution name: alpine, package manager: apk"
          apk add ${PACKAGES}
          ;;
        debian|ubuntu)
          echo "Distribution name: debian|ubuntu, package manager: apt"
          apt-get update && apt-get install -y ${PACKAGES}
          ;;
        centos|fedora)
          echo "Distribution name: centos|fedora, package manager: yum"
          yum install -y ${PACKAGES}
          ;;
        *)
          echo "Unsupported OS: $ID"
          exit 1
          ;;
      esac
    else
      echo "/etc/os-release not found. Unsupported environment."
      exit 1
    fi

.before-script-jwt-anchor: &export-jwt-keys-script
  # create JWT keys and save in environment variables
  - export PACKAGES="openssl"
  - *install-packages-script
  - export JWT_PRIVATE_KEY=$(openssl genpkey -algorithm RSA -outform PEM -pkeyopt rsa_keygen_bits:4096)
  - export JWT_PUBLIC_KEY=$(openssl req -x509 -new -key <(echo "$JWT_PRIVATE_KEY") -outform PEM -days 36500 -subj "/CN=${JWT_ISSUER}")

.before-script-export-version-python-anchor: &export-version-py-script
  - export PACKAGE_VERSION=$(grep 'version' "${PATH_TO_DOCKER_CONTEXT}/version.py" | cut -d'"' -f2)