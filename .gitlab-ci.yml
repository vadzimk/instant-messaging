# workflow:
#   rules:
#     - if: $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event"
#       when: never
#     - when: always

variables:
  FLUSHCACHE: "false" # trigger job to produce cache always when $FLUSHCACHE == "true"

stages:
  - install
  - test

.before-script-secrets-anchor: &export-env-vars-script
  # Access the value of the file variable indirectly
  - eval "FILE_CONTENT=\$$ENV_FILE_VARIABLE"
  - cat "$FILE_CONTENT" > .env
  - set -o allexport &&
    source .env &&
    set +o allexport

.iniit-db-base: # generic job, will not run, starts with dot
  variables:
    ENV_FILE_VARIABLE: ""
    SCRIPT_REMOTE_PATH: "/tmp/init-postgres-db.sh"
  before_script:
    <<: *export-env-vars-script
  script:
    - chmod 400 $WS_KEY # private key
    - scp -o StrictHostKeyChecking=no -i $WS_KEY init-postgres-db.sh ubuntu@$WS_HOST:${SCRIPT_REMOTE_PATH}
    - |
      ssh -o StrictHostKeyChecking=no -i $WS_KEY ubuntu@$WS_HOST "
        chmod +x \"$SCRIPT_REMOTE_PATH\" &&
        docker cp \"$SCRIPT_REMOTE_PATH\" \"pgbackups:${SCRIPT_REMOTE_PATH}\"
        docker exec -i \
          -e POSTGRES_PASSWORD=\"$POSTGRES_PASSWORD\" \
          -e POSTGRES_USER=\"$POSTGRES_USER\" \
          -e TARGET_USER=\"$POSTGRES_APP_USER\" \
          -e TARGET_USER_PASSWORD=\"$POSTGRES_APP_PASSWORD\" \
          -e DATABASE_NAME=\"$POSTGRES_DB\" \
          -e DATABASE_HOST=\"$POSTGRES_HOST\" \
          -e DATABASE_PORT=\"$POSTGRES_PORT\" \
        pgbackups bash \"$SCRIPT_REMOTE_PATH\"
      "

# init-test-postgres-job:
#   extends: .iniit-db-base
#   stage: install
#   variables:
#     ENV_FILE_VARIABLE: ENV_TEST

# init-production-postgres-job:
#   extends: .iniit-db-base
#   stage: install
#   variables:
#     ENV_FILE_VARIABLE: ENV_PROD

install-server-dependencies-job:
  stage: install
  image: python:3.10
  script:
    - cd backend
    - pip install --no-cache-dir pipenv
    - export PIPENV_VENV_IN_PROJECT=1
    - pipenv install --deploy --ignore-pipfile
  cache:
    key: DEP-S-$CI_COMMIT_REF_SLUG
    paths:
      - backend/.venv
    policy: push
  rules:
    - if: $FLUSHCACHE == "true"
      when: always
    - if: $FLUSHCACHE == "false"
      changes:
        - backend/Pipfile.lock
      when: always
    - when: never


.before-script-jwt-anchor: &export-jwt-keys-script
  # create JWT keys and save in environment variables
  - export JWT_PRIVATE_KEY=$(openssl genpkey -algorithm RSA -outform PEM -pkeyopt rsa_keygen_bits:4096)
  - export JWT_PUBLIC_KEY=$(openssl req -x509 -new -key <(echo "$JWT_PRIVATE_KEY") -outform PEM -days 36500 -subj "/CN=${JWT_ISSUER}")
  - echo $JWT_PUBLIC_KEY # TODO remove


test-server-job:
  stage: test
  image: python:3.10
  needs:
    - job: install-server-dependencies-job
      optional: true # if used cache
  variables:
    ENV_FILE_VARIABLE: ENV_TEST
  before_script:
    - *export-env-vars-script
    - *export-jwt-keys-script
  script:
    - pwd
    - ls -htal
    - cd backend
    - ls -htal
    - source .venv/bin/activate
    - python -m pytest -vv --junitxml=backend/junit.xml
  cache:
    key: DEP-S-$CI_COMMIT_REF_SLUG
    paths:
      - backend/.venv
    policy: pull
  artifacts:
    when: always
    reports:
      junit: backend/junit.xml
#  only:
#    changes:
#      - backend/**/*